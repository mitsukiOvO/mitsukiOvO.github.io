{
  "data":[
    {
      "title": "操作系统的主要目标(四个)",
      "answer": "方便性、有效性、可扩充性、开放性"
    },
    {
      "title": "操作系统的基本特性（四个）",
      "answer": "并发、共享、虚拟、异步"
    },
    {
      "title": "操作系统的主要功能（五个）",
      "answer": "1. 处理机管理：进程控制、进程同步、进程通信、调度\n2. 存储器管理：内存分配、内存保护、地址映射、内存扩充\n3. 设备管理：缓冲管理、设备分配、设备处理\n4. 文件管理：文件存储空间管理、目录管理、文件的读/写管理和保护\n5. 接口：用户接口（联机用户接口、脱机用户接口、图形用户接口）、程序接口"
    },
    {
      "title": "操作系统的种类",
      "answer": "1. 单道批处理操作系统\n2. 多道批处理系统\n3. 分时操作系统\n4. 实时操作系统"
    },
    {
      "title": "单道批处理操作系统的缺点",
      "answer": "缺点：系统的资源（CPU、内存、IO设备）得不到有效的利用"
    },
    {
      "title": "多道批处理系统的优缺点",
      "answer": "优点：资源利用率高、系统吞吐量大\n缺点：平均周转时间长、无交互能力\n需要解决的问题：处理机争用问题、内存分配和保护问题、IO设备分配问题、文件的组织和管理问题、作业管理问题、用户和系统的接口问题"
    },
    {
      "title": "分时操作系统的特点",
      "answer": "特征：多路性、独立性、及时性、交互性"
    },
    {
      "title": "实时操作系统的特点",
      "answer": "类型：（周期性实时任务和非周期性实时任务）（硬实时任务和软实时任务）\n特征：多路性、独立性、及时性、交互性、可靠性"
    },
    {
      "title": "微内核的基本功能",
      "answer": "进程（线程）管理、低级存储器管理、中断和陷入处理"
    },
    {
      "title": "微内核的优点",
      "answer": "提高的系统的可扩展性、增强了系统的可靠性、可移植性强、提供了对分布式系统的支持、融入了面向对象技术"
    },
    {
      "title": "微内核的缺点",
      "answer": "运行效率低下（上下文切换频繁），设计代价高"
    },
    {
      "title": "程序顺序执行时的特征",
      "answer": "顺序性、封闭性、可再现性"
    },
    {
      "title": "程序并发执行时的特征",
      "answer": "间断性、失去封闭性、不可再现性"
    },
    {
      "title": "进程的特性",
      "answer": "动态性、并发性、独立性、异步性、结构性"
    },
    {
      "title": "PCB的作用",
      "answer": "作为独立运行基本单位的标志、能实现间断性运行方式、提供进程管理所需要的信息、提供进程调度所需要的信息、实现与它进程的同步与通信"
    },
    {
      "title": "PCB中的内容",
      "answer": "1. 进程标志符（外部标识符、内部标识符）\n2. 处理机状态（通用寄存器、指令计数器、程序状态字、用户栈指针）\n3. 进程调度信息（进程状态、进程优先级、进程调度所需要的其他信息、事件）\n4. 进程控制信息（程序和数据的地址、进程同步和通信机制、资源清单、连接指针）"
    },
    {
      "title": "PCB的组织方式",
      "answer": "线性方式、链接方式、索引方式"
    },
    {
      "title": "操作系统的支撑功能",
      "answer": "中断处理、时钟管理、原语操作"
    },
    {
      "title": "引起创建进程的事件(四个)",
      "answer": "用户登录、作业调度、提供服务、应用请求"
    },
    {
      "title": "引起进程终止的事件（三个）",
      "answer": "正常结束、异常结束、外界干预"
    },
    {
      "title": "引起进程阻塞或被唤醒的事件",
      "answer": "向系统请求资源失败、等待某种操作完成、新数据尚未到达、等待新任务的到达"
    },
    {
      "title": "同步机制应遵循的规则",
      "answer": "空闲让进、忙则等待、有限等待、让权等待"
    },
    {
      "title": "进程通信的方式",
      "answer": "共享存储器：基于共享数据结构的通信方式、基于共享存储区的通信方式\n管道通信方式\n消息传递系统：直接通信方式、间接通信方式\n客户机―服务器系统：套接字（文件型、网路型）、远程过程调用和远程方法调用"
    },
    {
      "title": "进程和线程比较的方向",
      "answer": "调度的基本单位、并发性、拥有资源、独立性、系统开销、支持多处理机系统"
    },
    {
      "title": "TCB中的内容",
      "answer": "线程标识符、寄存器（PC，PSW，通用寄存器）、线程运行状态、优先级、线程专有存储器（现场保护信息、统计信息）、信号屏蔽、堆栈指针"
    },
    {
      "title": "线程的实现方式",
      "answer": "内核支持线程KST、用户级线程ULT"
    },
    {
      "title": "KST的优点",
      "answer": "1. 多处理机系统中，内核能够同时调度一个进程中的多个线程并行执行\n2. 进程中的一个线程被阻塞了，内核可以调度该进程中的其他线程或者其他进程中的线程\n3. 内核支持线程具有较小的数据结构和堆栈，线程的切换比较快，切换开销小\n4. 内核本身可以使用多线程技术，加快系统的执行速度和效率"
    },
    {
      "title": "KST的缺点",
      "answer": "对于用户进程来说，其内部线程切换需要切换上下文，导致系统开销大"
    },
    {
      "title": "ULT的优点",
      "answer": "1. 线程的切换不需要转换到内核空间\n2. 调度算法可以是进程专用的\n3. ULT的实现与OS平台无关"
    },
    {
      "title": "ULT的缺点",
      "answer": "1. 系统调用的阻塞问题，当进程中的某线程执行某系统调用的时候，会导致整个进程被阻塞\n2. 单纯的用户级线程实现方式下，多线程应用不能利用多处理机进行多重处理"
    },
    {
      "title": "ULT和KST的组合方式",
      "answer": "多对一、一对一、多对多"
    },
    {
      "title": "用户级线程的实现方式",
      "answer": "运行时系统、内核控制线程"
    },
    {
      "title": "处理机调度的层次",
      "answer": "高级调度（作业调度）、中级调度（内存调度）、低级调度（进程调度）"
    },
    {
      "title": "处理机调度算法的共同目标",
      "answer": "资源利用率、公平性、平衡性、策略强制执行"
    },
    {
      "title": "批处理系统调度算法的目标",
      "answer": "平均周转时间短、系统吞吐量高、处理机利用率高"
    },
    {
      "title": "分时系统调度算法的目标",
      "answer": "响应时间快、均衡性"
    },
    {
      "title": "实时系统调度算法的目标",
      "answer": "截止时间的保证、可预测性"
    },
    {
      "title": "进程调度的任务",
      "answer": "保存处理机的现场信息，按某种算法选取进程，把处理器分配给进程"
    },
    {
      "title": "实现实时调度的基本条件",
      "answer": "提供必要的信息、系统处理能力强、采用抢占式调度机制、具有快速切换机制"
    },
    {
      "title": "死锁的定义",
      "answer": "如果一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组进程是死锁的"
    },
    {
      "title": "产生死锁的原因",
      "answer": "竞争不可抢占（可消耗）资源、进程推进顺序不当"
    },
    {
      "title": "产生死锁的必要条件",
      "answer": "互斥条件、请求并保持条件、不可抢占条件、循环等待条件"
    },
    {
      "title": "处理死锁的方法",
      "answer": "死锁预防、死锁避免、死锁检测"
    },
    {
      "title": "解除死锁的方法",
      "answer": "抢占资源、终止（或撤销）进程"
    },
    {
      "title": "程序的装入方式",
      "answer": "绝对装入方式、可重定位装入方式、动态运行时的装入方式"
    },
    {
      "title": "程序的链接方式",
      "answer": "静态链接方式、装入时动态链接方式、运行时动态链接方式"
    },
    {
      "title": "连续分配存储管理方式",
      "answer": "单一连续分配、固定分区分配、动态分区分配"
    },
    {
      "title": "动态分区分配的分配算法",
      "answer": "首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法"
    },
    {
      "title": "动态分区分配相关操作",
      "answer": "紧凑、动态重定位"
    },
    {
      "title": "分段存储管理方式的优点",
      "answer": "方便编程、信息共享、信息保护、动态增长、动态链接"
    },
    {
      "title": "常规存储器管理方式（非虚拟存储器）的特征",
      "answer": "一次性、驻留性"
    },
    {
      "title": "局部性原理",
      "answer": "1. 时间局部性：如果程序中的某条指令被执行，则不久以后该指令可能再次被执行；如果某数据被访问过，那么不久以后该数据可能再次被访问\n2. 空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问"
    },
    {
      "title": "虚拟存储器的定义",
      "answer": "具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统"
    },
    {
      "title": "虚拟存储器的特征",
      "answer": "多次性、对换性、虚拟性"
    },
    {
      "title": "引入虚拟存储器的目的",
      "answer": "提高系统的内存利用率和系统的吞吐量"
    },
    {
      "title": "请求分页的内存分配策略",
      "answer": "固定分配局部置换、可变分配局部置换、可变分配全局置换"
    },
    {
      "title": "页面调入的位置",
      "answer": "1. 当有足够对换区空间的时候，（将文件拷贝到对换区后）从对换区的调入\n2. 当无足够的对换区空间的时候，不会修改的部分从文件去调入，会修改的部分（拷贝到对换区后）从对换区调入\n3. UNIX方式。对换区没有的从文件区调入，对换区有的从对换区调入"
    },
    {
      "title": "缺页率的影响因素",
      "answer": "页面大小、进程所分配物理块的数目、页面置换算法、程序固有特性"
    },
    {
      "title": "影响页面换进换出效率的因素",
      "answer": "页面置换算法、写回磁盘的频率、读入内存的频率"
    },
    {
      "title": "产生抖动的根本原因",
      "answer": "同时在系统中运行的进程太多，由此分配给每一个进程的物理块太少，不能满足进程正常运行的基本要求，指示每个进程在运行时，频繁地出现缺页，必须请求系统将所缺之页调入内存"
    },
    {
      "title": "抖动的预防方法",
      "answer": "采用局部置换策略、把工作集算法融入到处理机调度中、利用L（缺页之间的平均时间）=S（平均缺页服务时间）准则调节缺页率、选择暂停进程"
    },
    {
      "title": "I/O系统的主要任务",
      "answer": "完成用户提出的I/O请求，提高I/O速率，提高设备的利用率，为更高层的进程方便地使用这些设备提供手段"
    },
    {
      "title": "I/O系统的基本功能",
      "answer": "隐藏物理设备的细节、与设备的无关性、提高处理机和I/O设备的利用率、对I/O设备进行控制、确保对设备的正确共享、错误处理"
    },
    {
      "title": "I/O软件的层次结构",
      "answer": "1. 用户层I/O软件：实现与用户交互的接口，用户可以调用该层所提供的、与I/O操作有关的库函数对设备的操作\n2. 设备独立性软件：实现用户程序与设备驱动器的统一接口、设备命名、设备保护以及设备的分配与释放等，同时为设备管理和数据传送提供必要的存储空间\n3. 设备驱动程序：与硬件直接相关，用于具体实现系统对设备发出的操作指令，驱动I/O设备工作的驱动程序\n4. 中断处理程序：用于保存被中断进程的CPU环境，转入响应的中断处理程序进程处理，处理完毕再恢复被中断进程的线程后，返回被中断的进程"
    },
    {
      "title": "设备控制器的基本功能",
      "answer": "接受和识别命令、数据交换、标识和报告设备的状态、地址识别、数据缓冲区、差错控制"
    },
    {
      "title": "设备控制器的组成",
      "answer": "设备控制器和处理机的接口（数据寄存器、控制/状态寄存器）、设备控制器和设备的接口、I/O逻辑"
    },
    {
      "title": "I/O控制的方式",
      "answer": "1. 利用特定的I/O指令：每个控制寄存器分配一个I/O端口，设置一些特定的I/O指令(io-store cpu-reg,dev-no,dev-reg)。缺点：访问内存和访问设备需要两种不同的指令\n2. 内存映像I/O：当地址处于0~n-1范围内时，认为是内存地址，当地址大于等于n时，被认为是某个控制器的寄存器笛地址。简化了I/O的编程"
    },
    {
      "title": "I/O通道与一般的处理机之间的差别",
      "answer": "1. 指令类型单一，这是由于通道硬件比较简单，其所能执行的命令主要局限于与I/O操作有关的指令\n2. 通道没有自己的内存，通道与CPU共享内存"
    },
    {
      "title": "通道类型",
      "answer": "字节多路通道、数组选择通道、数组多路通道"
    },
    {
      "title": "中断处理程序的处理过程",
      "answer": "1. 测试是否有未响应的终端信号\n2. 保护被中断进程的CPU环境\n3. 转入相应的设备处理程序\n4. 中断处理\n5. 恢复CPU的现场并退出中断"
    },
    {
      "title": "设备驱动程序的功能",
      "answer": "1. 接收由与设备无关的软件发来的命令和参数，并将命令中的抽象要求转换为与设备相关的低层操作序列\n2. 检查用户I/O请求的合法性，了解I/O设备的工作状态，传递与I/O设备操作有关的参数，设置谁被的工作方式\n3. 发出I/O命令，如果设备空闲，便立即启动I/O设备，完成指定的I/O操作；如果设备忙碌，则将请求者的请求块挂在设备队列上等待\n4. 及时响应由设备控制器发来的中断请求，并根据其中断类型，调用相应的中断处理程序进行处理"
    },
    {
      "title": "设备驱动程序的特点",
      "answer": "1. 驱动程序是实现在与设备无关的软件和设备控制器之间通信和转换的程序\n2. 驱动程序与设备控制器以及I/O设备的设备特性紧密相关\n3. 驱动程序与I/O设备所采用的I/O控制方式\n4. 由于驱动程序与硬件紧密相关，因而其中的一部分必须用汇编语言书写。目前有很多驱动程序的基本部分已经固化在ROM中\n5. 驱动程序应允许可重入"
    },
    {
      "title": "设备处理方式",
      "answer": "1. 为每一类设备设置一个进程，专门用于执行这类设备的I/O操作\n2. 在整个系统中设置一个I/O进程，专门用于执行操作系统中的所有各种设备的I/O操作\n3. 不设置专门的设备处理进程，而只为各类设备设置相应的设备驱动程序，供用户或系统进程调用。（用得最多）"
    },
    {
      "title": "设备驱动程序的处理过程",
      "answer": "1. 将设备要求转换为具体要求\n2. 对服务请求进行校验\n3. 检查设备的状态\n4. 传送必要的参数\n5. 启动I/O设备"
    },
    {
      "title": "DMA的特点",
      "answer": "1. 数据传输的基本单位是数据块\n2. 所传送的数据是从设备直接送入内存的，或者相反\n3. 仅在传送一个或多个数据块的开始或结束时，才需CPU干预，整块数据的传送是在控制器的控制下完成的"
    },
    {
      "title": "DMA控制器的组成",
      "answer": "命令/状态寄存器CR、内存地址寄存器MAR、数据寄存器DR、数据计数器CR"
    },
    {
      "title": "设备独立性的定义",
      "answer": "设备独立性，即应用程序独立于具体使用的物理设备"
    },
    {
      "title": "使用物理设备名的缺点",
      "answer": "当同类设备空闲可用时，不能将同类设备分配给指定物理设备名的进程；当物理设备被更新后，该进程无法在该系统上运行"
    },
    {
      "title": "逻辑设备的定义",
      "answer": "抽象的设备名"
    },
    {
      "title": "设备独立性的优点",
      "answer": "设备分配时的灵活性、易于实现I/O重定向"
    },
    {
      "title": "与设备无关的软件",
      "answer": "设备驱动程序的统一接口、缓冲管理、差错管理、对独立设备的分配与回收、独立于设备的逻辑数据快"
    },
    {
      "title": "逻辑设备表的功能",
      "answer": "实现从逻辑设备名到物理设备名的映射"
    },
    {
      "title": "逻辑设备表的设置方式",
      "answer": "1. 整个系统只设置一张LUT表\n2. 为每个用户用户设置一张LUT表，通常还会配置一张系统设备表，然后用户的LUT会有指向系统设备表的指针"
    },
    {
      "title": "设备分配时应该考虑的因素",
      "answer": "1. 设备的固有属性：独占设备、共享设备、虚拟设备\n2. 设备分配算法：先来先服务算法、优先级高者优先算法\n3. 设备分配中的安全性：安全分配方式（进程请求I/O后便阻塞）、不安全分配方式（进程请求I/O后不阻塞）"
    },
    {
      "title": "独占设备的分配程序",
      "answer": "分配设备->分配控制器->分配通道"
    },
    {
      "title": "设备分配中的数据结构",
      "answer": "1. DCT（设备控制表）：每个设备一张，请求该设备被阻塞的进程的队列放在这张表中\n2. COCT（控制器控制表）\n3. CHCT（通道控制表）\n4. SDT（系统设备表）\n控制器表中有一个指向对应通道的通道控制表的指针\n通道控制表中有指向它对应的控制器表的列表的指针"
    },
    {
      "title": "假脱机技术的构成",
      "answer": "输入井和输出井(在磁盘中)、输入缓冲区和输出缓冲区(内存中)、输入缓冲区和输出缓冲区、井管理程序"
    },
    {
      "title": "假脱机技术的特点",
      "answer": "提高了I/O速度，将独占设备改造为共享设备、实现了虚拟设备的功能"
    },
    {
      "title": "引入缓冲区的原因",
      "answer": "1. 缓和CPU和I/O设备间速度不匹配的矛盾\n2. 减少对CPU的中断频率，放宽对CPU中断响应时间的限制\n3. 解决数据粒度不匹配的问题\n4. 提高CPU和I/O设备之间的并行性"
    },
    {
      "title": "缓冲池的组成",
      "answer": "空白缓冲队列、输入队列、输出队列"
    },
    {
      "title": "缓冲区的工作方式",
      "answer": "收容输入、提取输入、收容输出、提取输出"
    },
    {
      "title": "改善磁盘性能的方法",
      "answer": "1. 选择好的磁盘调度算法，减少磁盘的寻道时间\n2. 提高磁盘I/O速度，提高对文件的访问速度\n3. 采用冗余技术，提高磁盘系统的可靠性"
    },
    {
      "title": "磁盘访问时间的组成",
      "answer": "寻道时间（启动磁头臂时间s和磁头移动n条磁道所花费的时间之和）、旋转延迟时间、传输时间。（主要是寻道时间）"
    },
    {
      "title": "磁盘调度算法",
      "answer": "FCFS、SSTF、SCAN、CSCAN、NStepSCAN、FSCAN"
    },
    {
      "title": "文件的定义",
      "answer": "具有文件名的若干相关元素的集合。（元素指的是记录，即数据项的集合）"
    },
    {
      "title": "文件系统的层次",
      "answer": "1. 文件系统接口：命令接口和程序接口\n2. 对对象操纵和管理的软件集合：I/O控制层（设备驱动程序层）、基本文件系统层、基本I/O管理程序、逻辑文件系统\n3. 对象及其属性：文件、目录、磁盘存储空间"
    },
    {
      "title": "文件的组织方式",
      "answer": "顺序文件、索引文件、索引顺序文件、哈希文件"
    },
    {
      "title": "目录管理的要求",
      "answer": "1. 实现按名存取（最基本的功能，文件系统向用户提供的最基本的服务）\n2. 提高对目录的检索速度\n3. 文件共享\n4. 允许文件重名"
    },
    {
      "title": "单级目录的缺点",
      "answer": "1. 查找速度慢\n2. 不允许重名\n3. 不便于实现文件共享"
    },
    {
      "title": "两级目录结构的优点''",
      "answer": "1. 提高了目录的速度\n2. 在不同的用户目录中可以使用相同的文件名\n3. 不同用户还可使用不同的文件名访问系统中的同一个共享文件\n两级目录结构隔离开了各个用户，这既是一个优点也是一个缺点，会不便于用户之间共享文件"
    },
    {
      "title": "树形目录结构的优缺点",
      "answer": "1. 目录查询速度更快\n2. 层次更加清晰\n3. 能更加有序地进行文件的管理和保护\n缺点：需要按路径名逐级访问中间节点，增加了磁盘的访问次数，影响了查询速度"
    },
    {
      "title": "目录查询技术",
      "answer": "线性检索法、Hash方法"
    },
    {
      "title": "用符号链接实现共享的优点",
      "answer": "不会发生在文件主删除一共享文件后留下一悬空指针的情况"
    },
    {
      "title": "用符号链接实现共享缺点",
      "answer": "1. 在每次访问共享文件时，都可能要多次读盘，增加了启动磁盘的频率\n2. 当遍历整个文件系统时会多次遍历到该共享文件。例如，当一个程序员把一个目录中的所有文件都转储到磁带上去时，就可能对一个共享文件产生多个拷贝"
    },
    {
      "title": "影响文件安全性的主要因素",
      "answer": "1. 人为因素\n2. 系统因素\n3. 自然因素"
    },
    {
      "title": "为保证文件系统的安全性，可以采用的措施",
      "answer": "1. 采用存取控制机制\n2. 采取系统容错技术\n3. 采用后备系统"
    },
    {
      "title": "对磁盘存储器管理的主要任务和要求",
      "answer": "1. 有效利用存储空间\n2. 提高磁盘的I/O速度\n3. 提高磁盘系统的可靠性"
    },
    {
      "title": "外存组织方式",
      "answer": "连续组织方式、链接组织方式、索引组织方式"
    },
    {
      "title": "连续组织方式的优缺点",
      "answer": "主要优点：顺序访问容易、顺序访问速度快\n主要缺点：\n- 要求为一个文件分配连续的存储空间\n- 必须事先知道文件的长度\n- 不能灵活地删除和插入记录\n- 对于那些动态增长的文件，由于事先很难知道文件的最终大小，因而很难为其分配空间，而即便事先知道了文件的大小并预先分配了空间，也会使大量的存储空间空闲"
    },
    {
      "title": "链接组织方式的优缺点",
      "answer": "主要优点：\n- 消除了磁盘的外部碎片，提高了外存利用率\n- 对插入、删除和修改记录都非常容易\n- 能适应文件的动态增长\n主要缺点：\n- 不能支持高效的直接存取\n- FAT需要占用较大的内存空间\n形式：隐式链接（随机访问速度降低、可靠性差）、显示链接（FAT）"
    },
    {
      "title": "索引组织方式的形式",
      "answer": "单级索引组织方式、多级索引组织方式、增量式索引组织方式"
    },
    {
      "title": "文件存储空间的管理的方法",
      "answer": "空闲表法、空闲链表法（空闲盘块链、空闲盘区链）、位示图法、成组链接法"
    },
    {
      "title": "提高文件访问速度的方法",
      "answer": "1. 改进文件的目录结构以及检索目录的方法来减少对目录的查找时间\n2. 选取好的文件存储结构，以提高对文件的访问速度\n3. 提高磁盘的I/O速度"
    }
  ]
}